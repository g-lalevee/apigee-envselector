#!/bin/bash

set -e

ENVSELECTOR_ROOT=$( (cd "$(dirname "$0")" && cd .. && pwd ))
source "$ENVSELECTOR_ROOT/lib/logutils.sh"

for dependency in jq sackmesser
do
  if ! [ -x "$(command -v $dependency)" ]; then
    >&2 logfatal "Required command is not on your PATH: $dependency."
    >&2 logfatal "Please install it before you continue."
    exit 2
  fi
done

print_usage() {
    cat << EOF
Apigee Environment Selector.
usage: envselector STRATEGY -e ENV -o ORG [-p PROXY_NAME] [-t TOKEN] [options]
  STRATEGY:
    fill-first
    spread-out
  Options:
    -g,--envgroup, Apigee environment group name
    -o,--organization, Apigee organization name
    -p,--proxy, Apigee proxy name to check deployment
    -t,--token, GCP token 
    --debug, show verbose debug output
    --debug-all, show verbose debug output, including Sackmesser
EOF
}

STRATEGY="$1"

if [ -z "$STRATEGY" ] || [ "$STRATEGY" == "help" ]; then
    print_usage
    exit 0
elif [ -z "$STRATEGY" ] || [ "$STRATEGY" != "fill-first" ] && [ "$STRATEGY" != "spread-out" ]; then
    logerror "Please provide a valid strategy."
    exit 1
fi

shift 1
posArgs=()

while [ "$#" -gt 0 ]; do
  case "$1" in
    -g) export ENV_GROUP="$2"; shift 2;;
    -o) export APIGEE_ORG="$2"; shift 2;;
    -p) export APIGEE_PROXY="$2"; shift 2;;
    -t) export TOKEN="$2"; shift 2;;
    
    --debug) debug="T"; shift 1;;
    --debug-all)  export debug="T"; shift 1;;
    --envgroup) export ENV_GROUP="${2}"; shift 2;;
    --organization) export APIGEE_ORG="${2}"; shift 2;;
    --proxy) export APIGEE_PROXY="$2"; shift 2;;
    --token) export TOKEN="${2}"; shift 2;;

    -*) logfatal "unknown option: $1" >&2; exit 1;;
    *) posArgs+=("$1"); shift 1;;
  esac
done


logdebug "Selecting target environment in list of environments attached to environment group \"$ENV_GROUP\", with strategy \"$STRATEGY\"..."
logdebug "Getting deployments/environment..."

# Retrieve environment list from environment group name parameter
ENV_LIST=$(sackmesser list --googleapi -t "$TOKEN" organizations/$APIGEE_ORG/envgroups/$ENV_GROUP/attachments | jq -r .environmentGroupAttachments[].environment)
if [ -z "$ENV_LIST" ]; then
  exit 1
fi

# Retrieve proxy deployment number for each environment
for ENV in $ENV_LIST
do
    DEPLOYMENT_NUMBER=$(sackmesser list --googleapi -t "$TOKEN" organizations/$APIGEE_ORG/environments/$ENV/deployments | jq ". | length")
    if [ $DEPLOYMENT_NUMBER -lt 50 ]; then
      logdebug "   $ENV -> $DEPLOYMENT_NUMBER"
      DEPLOYMENT_LIST="$DEPLOYMENT_LIST$ENV $DEPLOYMENT_NUMBER\n"
    else
      logdebug "$ENV -> $DEPLOYMENT_NUMBER *"
    fi
done
# remove last line feed
DEPLOYMENT_LIST=$(echo $DEPLOYMENT_LIST | sed 's/..$//')


# Find if proxy already deployed
if [ ! -z $APIGEE_PROXY ]; then
  logdebug ""
  logdebug "Searching for the environment in which the latest proxy release was deployed..."
  LAST_RELEASE=0
  LAST_RELEASE_ENVIRONMENT=""
  for ENV in $(echo -e $DEPLOYMENT_LIST | cut -f 1 -d " ")
  do
    ENV_RELEASE=$(sackmesser list --googleapi -t "$TOKEN" organizations/$APIGEE_ORG/apis/$APIGEE_PROXY/deployments | jq -r  ".deployments[] | select(.environment== \"$ENV\").revision") 
    if ! [ -z $ENV_RELEASE ]; then
      logdebug "   $ENV -> $APIGEE_PROXY, release $ENV_RELEASE"
      if [ $ENV_RELEASE -gt $LAST_RELEASE ]; then
        LAST_RELEASE_ENVIRONMENT=$ENV
        LAST_RELEASE=$ENV_RELEASE
      fi
    else
      logdebug "   $ENV -> $APIGEE_PROXY not deployed"
    fi
  done
fi

if [ $LAST_RELEASE_ENVIRONMENT ]; then
  logdebug "$APIGEE_PROXY last release ($LAST_RELEASE) is deployed in $LAST_RELEASE_ENVIRONMENT"
  SELECTED=$LAST_RELEASE_ENVIRONMENT
else
  logdebug ""
  logdebug "Selecting for the target environment (strategy: $STRATEGY)..."

  case "$STRATEGY" in
    fill-first)
        # select environment having max number of deployed proxy, less than 50
        SELECTED=$(echo -e $DEPLOYMENT_LIST |  sort -k2nr -k1 | head -n 1  | cut -f 1 -d " ")
        ;;
    spread-out)
        # select environment having min number of deployed proxy, less than 50
        SELECTED=$(echo -e $DEPLOYMENT_LIST |  sort -k2n -k1 | head -n 1 | cut -f 1 -d " ")
        ;;
    *)
        echo $"Strategy: $0 {fill-first|spread-out}"
        exit 1
  esac
fi
logdebug ""
logdebug "Selected environment: $SELECTED"
echo $SELECTED

